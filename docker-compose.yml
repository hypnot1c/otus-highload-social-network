version: '3.9'

services:
  app-balancer-nginx:
    image: nginx:1.25.3
    container_name: app-balancer-nginx
    networks:
      - social_network_common
    volumes:
      - "./deploy/nginx/default.conf:/etc/nginx/conf.d/default.conf"
    ports:
      - "5083:5083"
    depends_on: 
      - otus.ha.sn.web.api
      - otus.ha.sn.web.app.auth
  otus.ha.sn.web.api:
    image: ${DOCKER_REGISTRY-}otushasnwebapi
    container_name: web_api_application
    hostname: web_api
    networks:
      - social_network_common
    depends_on: 
      - otus.ha.sn.web.app.auth
      - db-master
      - db-slave-1
      - cache 
    ports:
      - "5080:80"
    build:
      context: .
      dockerfile: ./src/Api/OTUS.HA.SN.Web.Api/Dockerfile
  otus.ha.sn.web.api.counters:
    image: ${DOCKER_REGISTRY-}otushasnwebapicounters
    container_name: web_api_counters_application
    hostname: web_api_counters
    networks:
      - social_network_common
    depends_on: 
      - otus.ha.sn.web.app.auth
      - cache 
    ports:
      - "5084:80"
    build:
      context: .
      dockerfile: ./src/Api/OTUS.HA.SN.Web.Api.Counters/Dockerfile
  otus.ha.sn.web.api.dialogs:
    image: ${DOCKER_REGISTRY-}otushasnwebapidialogs
    container_name: web_api_dialogs_application
    hostname: web_api_dialogs
    networks:
      - social_network_common
    depends_on: 
      - db-master
      - db-slave-1
      - otus.ha.sn.web.api
    ports:
      - "5082:80"
    build:
      context: .
      dockerfile: ./src/Api/OTUS.HA.SN.Web.Api.Dialogs/Dockerfile
  otus.ha.sn.web.asyncapi:
    image: ${DOCKER_REGISTRY-}otushasnwebasyncapi
    container_name: web_asyncapi_application
    hostname: web_asyncapi
    networks:
      - social_network_common
    depends_on: 
      - db-master
      - db-slave-1
      - otus.ha.sn.web.api
    ports:
      - "5081:80"
    build:
      context: .
      dockerfile: ./src/Api/OTUS.HA.SN.Web.AsyncApi/Dockerfile
  otus.ha.sn.web.app.auth:
    image: ${DOCKER_REGISTRY-}otushasnwebappauth
    deploy:
      replicas: 3
    hostname: web_app_auth
    networks:
      - social_network_common
    depends_on: 
      - db-master
      - db-slave-1
      - cache
    build:
      context: .
      dockerfile: ./src/Apps/OTUS.HA.SN.Web.App.Auth/Dockerfile
  db-balancer-haproxy:
    image: haproxy:2.9.2
    container_name: db-balancer-haproxy
    networks:
      - social_network_common
    volumes:
      - "./deploy/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg"
    ports:
      - "5433:5433"
    depends_on: 
      - otus.ha.sn.web.api
      - otus.ha.sn.web.app.auth
  db-master:
    image: postgres:15.4
    shm_size: 1gb
    container_name: postgres_db_master
    hostname: postgres_db_master
    networks:
      - social_network_common
    environment:
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - ${PG_MASTER_DATA_PATH}:/var/lib/postgresql/data
      - ./deploy/psql/master/init.sh:/docker-entrypoint-initdb.d/init.sh
      - ./deploy/user_data.copy:/docker-entrypoint-initdb.d/user_data.copy
      - ./deploy/user_data_auth.copy:/docker-entrypoint-initdb.d/user_data_auth.copy
      - ./deploy/psql/master/postgresql.conf:/tmp/postgresql.conf
      - ./deploy/psql/master/pg_hba.conf:/tmp/pg_hba.conf
  db-slave-1:
    image: postgres:15.4
    shm_size: 1gb
    container_name: postgres_db_slave_1
    hostname: postgres_db_slave_1
    networks:
      - social_network_common
    depends_on: 
      - db-master
    environment:
      POSTGRES_PASSWORD: password
    ports:
      - "15432:5432"
    volumes:
     - ${PG_SLAVE_1_DATA_PATH}:/var/lib/postgresql/data
     - ./deploy/psql/slave/init_slave.sh:/docker-entrypoint-initdb.d/init_slave.sh
  db-slave-2:
    image: postgres:15.4
    shm_size: 1gb
    container_name: postgres_db_slave_2
    hostname: postgres_db_slave_2
    networks:
      - social_network_common
    depends_on: 
      - db-master
    environment:
      POSTGRES_PASSWORD: password
    volumes:
     - ${PG_SLAVE_2_DATA_PATH}:/var/lib/postgresql/data
     - ./deploy/psql/slave/init_slave.sh:/docker-entrypoint-initdb.d/init_slave.sh
  cache:
    image: redis:7.2.0
    container_name: redis_cache
    hostname: redis_cache
    depends_on: 
      - db-master
    networks:
      - social_network_common
    ports:
      - "6379:6379"
  citus_master:
    container_name: "citus_db_master"
    hostname: citus_db_master
    image: "citusdata/citus:postgres_15"
    networks:
      - social_network_common
    ports: ["${COORDINATOR_EXTERNAL_PORT:-35432}:5432"]
    labels: ["com.citusdata.role=Master"]
    environment: &AUTH
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "password"
      PGUSER: "${POSTGRES_USER:-postgres}"
      PGPASSWORD: "password"
      POSTGRES_HOST_AUTH_METHOD: "${POSTGRES_HOST_AUTH_METHOD:-trust}"
    volumes:
     - ${CITUS_MASTER_DATA_PATH}:/var/lib/postgresql/data
     - ./deploy/citus/master/init.sh:/docker-entrypoint-initdb.d/init.sh
  citus_worker:
    image: "citusdata/citus:postgres_15"
    labels: ["com.citusdata.role=Worker"]
    depends_on: [citus_manager]
    environment: *AUTH
    command: "/wait-for-manager.sh"
    networks:
      - social_network_common
    volumes:
      - healthcheck-volume:/healthcheck
  citus_manager:
    container_name: "citus_db_manager"
    image: "citusdata/membership-manager:0.3.0"
    networks:
      - social_network_common
    volumes:
      - "${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock"
      - healthcheck-volume:/healthcheck
    depends_on: [citus_master]
    environment: &AUTH
      CITUS_HOST: citus_db_master
  kafka:
    container_name: "kafka"
    hostname: kafka
    image: bitnami/kafka:3.6.0
    ports:
      - "9094:9094"
    networks:
      - social_network_common
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_LOG_RETENTION_MINUTES=5
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
  rabbit:
    container_name: "rabbit"
    hostname: rabbit
    image: masstransit/rabbitmq:3.12.7
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - social_network_common
  tarantool:
    container_name: "tarantool_db_master"
    hostname: tarantool_db_master
    image: tarantool/tarantool:2.10.8
    command: tarantool /usr/local/share/tarantool/init.lua
    ports:
      - "3301:3301"
    networks:
      - social_network_common
    environment:
      - TARANTOOL_USER_NAME=web_api
      - TARANTOOL_USER_PASSWORD=password
    volumes:
     - ${TARANTOOL_MASTER_DATA_PATH}:/opt/tarantool/
     - ./deploy/tarantool/master/:/usr/local/share/tarantool/
  jmeter-gui:
    container_name: "jmeter-gui"
    hostname: jmeter-gui
    image: guitarrapc/jmeter-gui:5.3
    tty: true
    volumes:
      - ./test/plan/:/root/jmeter/
      - ./deploy/user_data.copy:/root/jmeter/user_data.copy
    ports:
      - 5900:5900
      - 3390:3389
    networks:
      - social_network_common
  zabbix-snmptraps:
    container_name: "zabbix-snmptraps"
    hostname: "zabbix-snmptraps"
    image: zabbix/zabbix-snmptraps:alpine-6.0-latest
    ports:
      - 162:1162/udp
    volumes:
      - ${ZABBIX_ROOT}/snmptraps:/var/lib/zabbix/snmptraps:rw
      - ${ZABBIX_ROOT}/mibs:/usr/share/snmp/mibs:ro
    networks:
      - social_network_common
  zabbix-server:
    container_name: "zabbix-server"
    hostname: "zabbix-server"
    image: zabbix/zabbix-server-pgsql:alpine-6.0-latest
    ports:
      - 10051:10051
    volumes_from: 
      - zabbix-snmptraps
    networks:
      - social_network_common
    environment:
      - DB_SERVER_HOST=postgres_db_master
      - POSTGRES_USER=zabbix
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=otus_social_network_zabbix
      - ZBX_ENABLE_SNMP_TRAPS=true
  zabbix-web-ui:
    container_name: "zabbix-web-ui"
    hostname: "zabbix-web-ui"
    image: zabbix/zabbix-web-nginx-pgsql:alpine-6.0-latest
    ports:
      - 6443:8443
      - 6080:8080
    volumes:
      - ${ZABBIX_ROOT}/nginx/ssl:/etc/ssl/nginx:ro
    networks:
      - social_network_common
    environment:
      - DB_SERVER_HOST=postgres_db_master
      - POSTGRES_USER=zabbix
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=otus_social_network_zabbix
      - ZBX_SERVER_HOST=zabbix-server
  zabbix-agent2:
    container_name: "zabbix-agent2"
    hostname: "zabbix-agent2"
    image: zabbix/zabbix-agent2:alpine-6.0-latest
    networks:
      - social_network_common
    environment:
      - ZBX_SERVER_HOST=zabbix-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    user: 0:0
volumes:
  healthcheck-volume:
networks:
  social_network_common:
    name: social_network_common
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/16
          gateway: 172.19.0.1
  
